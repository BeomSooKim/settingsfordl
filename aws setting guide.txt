# rewrite for 18.04 bionic
# aws EC2 p2.xlarge instance test(Tokyo region)

# ubuntu repo # aws는 region이 한국이 아니므로 변경하지 않음

vim /etc/apt/sources.list -> repository 변경
kr.archive.ubuntu.com -> ftp.daumkakao.com 
security.ubuntu.com -> ftp.daumkakao.com

# Install libs

sudo apt-get update
sudo apt-get upgrade

sudo apt-get install build-essential cmake git unzip pkg-config
sudo apt-get install libjpeg-dev libpng-dev libtiff-dev

# for camera stream and video
sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev
sudo apt-get install libxvidcore-dev libx264-dev

# install GTK
sudo apt-get install libgtk-3-dev

# Optimize opencv functions
sudo apt-get install libatlas-base-dev gfortran

sudo apt-get install python3-dev(version 3.6.7)

# Downloads opencv & opencv_contrib(3.4.4 zip file download & server upload)
https://github.com/opencv/opencv/releases
https://github.com/opencv/opencv_contrib/releases

# 압축 폴더를 opencv, opencv_contrib로 이름 변경
cd ~
unzip opencv.zip
unzip opencv_contrib.zip

mv opencv-3.4.4.zip opencv
mk opencv_contrib-3.4.4.zip opencv_contrib

# python3 pip install
wget https://bootstrap.pypa.io/get-pip.py
sudo -H python3 get-pip.py

sudo -H pip install virtualenv virtualenvwrapper
sudo rm -rf ~/.cache/pip get-pip.py

# virtualenv and virtualenvwrapper
# https://www.pyimagesearch.com/2018/05/28/ubuntu-18-04-how-to-install-opencv/
vim ~/.bashrc
# add below commands
export WORKON_HOME=$HOME/.virtualenvs
export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3
source /usr/local/bin/virtualenvwrapper.sh

source ~/.bashrc

mkvirtualenv dl(virtualenv name) -p python3

# 이후 작업은 위에서 만든 virtualenv가 actviate된 상태에서 실행
# activate command : workon dl / decativate command : deactivate dl

# Install CUDA & Nvidia Driver
## intel gpu shutdown(aws p2 instance는 설정할 필요 없음)
sudo code --user-data-dir /s/DocRef/usr_data_dir/ /etc/modprobe.d/blacklist-nouveau.conf

	blacklist nouveau
	blacklist lbm-nouveau
	options nouveau modeset=0
	alias nouveau off
	alias lbm-nouveau off

echo options nouveau modeset=0 | sudo tee -a /etc/modprobe.d/nouveau-kms.conf
sudo update-initramfs -u
sudo reboot

wget http://us.download.nvidia.com/tesla/xxx.xxx/NVIDIA-Linux-x86_64-xxx.xxx.run(gpu driver file 다운로드)
developer.nvidia.com에서 cuda 10.0 .run파일 다운로드(nvidia 가입 필요)

chmod +x cuda_10.0.130_410.48_linux.run 
sudo ./cuda_10.0.130_410.48_linux.run -extract=`pwd`/nvidia
cd nvidia/
sudo ./NVIDIA-Linux-x86_64-410.48.run 
modprobe nvidia
sudo ./cuda-linux.10.0.130-24817639.run 
spacebar로 description pass
sudo ./cuda-samples.10.0.130-24817639-linux.run 

	# Install Nvidia Driver in anther way
	sudo add-apt-repository ppa:graphics-drivers
	sudo apt update
	lspci | grep -i nvidia
	nvidia-smi
	sudo apt purge nvidia-*
	sudo apt autoremove --purge
	sudo apt install nvidia-387 nvidia-settings 
	sudo reboot

	# Install CUDA toolkit - driver auto install, not matching driver auto remove
	sudo dpkg -i cuda-repo-ubuntu1604-9-1-local_9.1.85-1_amd64.deb
	sudo apt-key add /var/cuda-repo-<version>/7fa2af80.pub
	sudo apt-get update
	sudo apt-get install cuda

# bashrc cuda directory
	# NVIDIA CUDA Toolkit
	vim ~/.bashrc
	export PATH=/usr/local/cuda-10.0/bin:$PATH
	export LD_LIBRARY_PATH=/usr/local/cuda-10.0/lib64/:$LD_LIBRARY_PATH

# Test CUDA toolkit
source ~/.bashrc
cd /usr/local/cuda-8.0/samples/1_Utilities/deviceQuery
sudo make
./deviceQuery
정상 output은 아래와 같음
deviceQuery, CUDA Driver = CUDART, CUDA Driver Version = 8.0, CUDA Runtime Version = 8.0, NumDevs = 1, Device0 = Tesla K80
Result = PASS

nvidia-smi
gpu device 정보 뜨면 정상설치된 것임

# Install cudnn
tar -zxf cudnn-10.0-linux-x64-v7.4.2.24.tgz(or .solitairetheme8) cuda/
cd cuda/
sudo cp -vP lib64/* /usr/local/cuda/lib64/
sudo cp -vP include/* /usr/local/cuda/include/

# build opencv
cd opencv
mkdir build
cd build
pip install numpy 

# OPENCV_EXTRA_MODULES_PATH(opencv_contrib path) 및 PYTHON_EXECUTABLE(virtualenv python path) 경로 제대로 잡아주어야 함
cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D INSTALL_PYTHON_EXAMPLES=ON -D INSTALL_C_EXAMPLES=OFF -D OPENCV_ENABLE_NONFREE=ON -D OPENCV_EXTRA_MODULES_PATH=/s/pkgs/opencv_contrib/modules -D PYTHON_EXECUTABLE=~/.virtualenvs/dl/bin/python -D BUILD_EXAMPLES=ON ..
make -j16 # 코어 수
# 코어 수 확인 
grep -c processor /proc/cpuinfo
sudo make install
sudo ldconfig

# make symbolic link
cd ~/.virtualenvs/dl/lib/python3.6/site-packages
ln -s /usr/local/python/cv2/python-3.6/cv2.cpython-36m-x86_64-linux-gnu.so cv2.so

# Install prerequsites for Keras
pip install scipy matplotlib pillow
pip install imutils h5py requests progressbar2
pip install scikit-learn scikit-image

# build tensorflow
# http://www.python36.com/install-tensorflow141-gpu/
git clone https://github.com/tensorflow/tensorflow.git
cd tensorflow/
git co -b r1.12 v1.12.0 (co : checkout)

# openjdk
sudo apt install openjdk-11-jdk

# bazel install
wget https://github.com/bazelbuild/bazel/releases/download/0.18.1/bazel_0.18.1-linux-x86_64.deb
sudo apt install pkg-config g++ zlib1g-dev python
sudo dpkg -i bazel_0.18.1-linux-x86_64.deb 
#sudo apt --fix-broken install

sudo apt-get install python3-numpy python3-dev python3-pip python3-wheel

# nvidia nccl
nvidia-developer  홈페이지에서 nccl 다운로드
sudo dpkg -i nccl-repo-ubuntu1804-2.3.7-ga-cuda10.0_1-1_amd64.deb 
sudo apt-key add /var/nccl-repo-2.3.7-ga-cuda10.0/7fa2af80.pub
sudo apt install libnccl2 libnccl-dev

# prerequsites
pip install keras_applications keras_preprocessing h5py

# tensorflow build
./configure

1. Python Path: DO NOT ACCEPT DEFAULT, input: /usr/bin/python3.6
2. Python Library Path: Default: ~/.virtualenvs/dl/lib/python3.6/site-packages
3. Apache Ignite support : Y
4. XLA JIT support : Y
5. openCL SYCL support : N
6. ROCm support : N
7. CUDA support : y
8. CUDA SDK version : installed cuda version
9. cuda path : default
10. cuDNN version : installed cudnn version
11. cuDNN path : default
12. TensorRT support : N
13. NCCL version : installed nccl version
14. nccl Path : installed path(libnccl.so.X 위치)
15. compute capability : https://developer.nvidia.com/cuda-gpus 에서 맞는 gpu capability 입력
16. cuda compiler : N
17. gcc : default
18. MPI support : N
19. optimization flags : default
20. Android builds : N

#bazel build --config=opt //tensorflow/tools/pip_package:build_pip_package << for cpu version install
bazel build --config=opt --config=cuda //tensorflow/tools/pip_package:build_pip_package -<< for gpu version install
-> aws p2.xlarge 에서 컴파일만 약 5시간 걸린듯...

# make pkg
./bazel-bin/tensorflow/tools/pip_package/build_pip_package /s/tmp/tensorflow_pkg/(.whl파일 생성할 디렉토리경로)

# install tensorflow
(.whl파일 생성 경로로 이동)
pip install tensorflow-1.12.0-cp36-cp36m-linux_x86_64.whl

# install keras
pip install keras

# package test
python
import tensorflow
import keras -> using tensorflow backend 출력

# install vscode
sudo apt update
sudo apt install software-properties-common apt-transport-https wget
wget -q https://packages.microsoft.com/keys/microsoft.asc -O- | sudo apt-key add -
sudo add-apt-repository "deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main"